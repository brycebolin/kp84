#!/usr/bin/env python

import os, sys, optparse, shutil, glob, copy
import numpy as np
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt

from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.table import Table, vstack
from astropy.io import ascii
from astropy.time import Time
from astropy.wcs import WCS

import h5py    
from astropy.io import fits

import ztfsub.utils, ztfsub.surveys
import ztfsub.plotting

from skimage.feature import register_translation
import image_registration

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    #parser.add_option("--dataDir",default="/Data3/archive_kped/20180611/1815f_7_g_20180611_064500.040319_o/")
    parser.add_option("--dataDir",default="/Users/mcoughlin/Code/KP84/observing/20180804/ZTFHC10_10_g_20180804_042052.034227_o/")

    parser.add_option("-t","--tmpDir",default="/tmp")
    parser.add_option("-i","--inputDir",default="../input")
    parser.add_option("-o","--outputDir",default="../output")
    parser.add_option("-d","--defaultsDir",default="../defaults")

    parser.add_option("-n","--nimages",default=1,type=int)
    parser.add_option("-x","--xstar",default=-1,type=float)
    parser.add_option("-y","--ystar",default=-1,type=float)
    parser.add_option("--xstar_field",default=-1,type=float)
    parser.add_option("--ystar_field",default=-1,type=float)

    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doSubtractBackground",  action="store_true", default=False)
    parser.add_option("--doOverwrite",  action="store_true", default=False)
    parser.add_option("--doStack",  action="store_true", default=False)

    parser.add_option("--doPhase",  action="store_true", default=False)
    parser.add_option("-p","--phase",default=0.004800835466385,type=float)
    #parser.add_option("-p","--phase",default=0.0044,type=float)
    parser.add_option("--nphase",default=64,type=int)

    parser.add_option("--doCalibration",  action="store_true", default=False)
    parser.add_option("--doForcedPhotometry",  action="store_true", default=False)
    parser.add_option("--doMakeMovie",  action="store_true", default=False)
    parser.add_option("--doRegistration",  action="store_true", default=False)

    parser.add_option("--doSubtraction",  action="store_true", default=False)
    parser.add_option("--subtractionDir",default="../subtraction")
    parser.add_option("--subtractionSource",default="ps1")
    parser.add_option("--image_size",default=4000,type=int)

    opts, args = parser.parse_args()

    return opts

def dark_image(calibrationDir,camsetting):

    darkfiles = glob.glob(os.path.join(calibrationDir,'dark_%d*.fits'%camsetting))
    for ii, darkfile in enumerate(darkfiles):
        hdulist = fits.open(darkfile)
        if ii == 0:
            if hdulist[0].data is None:
                hdulist = hdulist[1:]
            xshape, yshape = hdulist[0].data.shape
            dark = np.empty([xshape,yshape,0])
        for hdu in hdulist: 
            dark = np.append(dark,np.expand_dims(hdu.data,axis=2),axis=2)
    dark = np.median(dark,axis=2)

    return dark

def correct_image(calibrationDir,fitsfile,scienceimage,
                  filt,camsetting,nimages):
    dark = dark_image(calibrationDir,camsetting)

    flatfiles = glob.glob(os.path.join(calibrationDir,'flat_%s*.fits'%filt))
    for ii, flatfile in enumerate(flatfiles):
        hdulist = fits.open(flatfile)
        if ii == 0:
            xshape, yshape = hdulist[0].data.shape
            flat = np.empty([xshape,yshape,0])
        for hdu in hdulist: 
            flat = np.append(flat,np.expand_dims(hdu.data,axis=2),axis=2)
    flat = np.median(flat,axis=2)

    IFminusIB = flat - dark
    m = np.mean(IFminusIB)

    hdulist = fits.open(fitsfile,memmap=True)
    for ii in range(len(hdulist)):
        if ii == 0: continue
        hdulist[ii].data = ((hdulist[ii].data - dark)*m)/IFminusIB

    if nimages == 1:
        hdulist2 = hdulist
    else:
        hdulist2 = []
        cnt = 1
        for ii in range(len(hdulist)):
            if ii == 0:
                hdulist2.append(hdulist[ii])
            else:
                if cnt == 1:
                    hdulist_hold = copy.copy(hdulist[ii])
                    xshape, yshape = hdulist_hold.data.shape
                    data = np.empty([xshape,yshape,0])
                data = np.append(data,np.expand_dims(hdulist[ii].data,axis=2),axis=2)
                cnt = cnt + 1            

                if cnt == nimages:
                    hdulist_hold.data = np.mean(data,axis=2)
                    hdulist2.append(hdulist_hold)
                    cnt = 1    

        hdulist2 = fits.HDUList(hdus=hdulist2)

    keywords_to_remove = ["RAD","DECD","TELRA","TELDEC","TELRAD","TELDECD","CRPIX1","CRPIX2","CRVAL1","CRVAL2","CD1_1","CD1_2","CD2_1","CD2_2","CCD_ROT","PIXSCALX","PIXSCALY","CUNIT1","CUNIT2","WCSAXES","WCSNAME","RADESYS","WCSVERS","CTYPE1","CTYPE2","RA","DEC"]
    for ii in range(len(hdulist2)):
        for keyword in keywords_to_remove:
            if keyword in hdulist2[ii].header:
                del hdulist2[ii].header[keyword]

    hdulist2.writeto(scienceimage,output_verify='fix',overwrite=True)

def stack_images(stackDir,fitsfiles,nimages,doRegistration=False): 
    
    cnt = 0
    for ii in range(len(fitsfiles)):
        scienceimage = os.path.join(stackDir,fitsfiles[ii].split("/")[-1])
        if os.path.isfile(scienceimage): continue

        hdulist = fits.open(fitsfiles[ii])

        if cnt == 0:
            if doRegistration:
                reference = hdulist[1].data

        hdulist2 = []
        cnt = 1
        for ii in range(len(hdulist)):
            if ii == 0:
                hdulist2.append(hdulist[ii])
            else:
                if cnt == 1:
                    hdulist_hold = copy.copy(hdulist[ii])
                    xshape, yshape = hdulist_hold.data.shape
                    data = np.empty([xshape,yshape,0])

                if doRegistration:
                    shift, error, diffphase = register_translation(reference, hdulist[ii].data, upsample_factor=1)
                    shifted = image_registration.fft_tools.shiftnd(hdulist[ii].data, (shift[0], shift[1]))
                    data = np.append(data,np.expand_dims(shifted,axis=2),axis=2)
                else:
                    data = np.append(data,np.expand_dims(hdulist[ii].data,axis=2),axis=2)
                cnt = cnt + 1

                if cnt == nimages:
                    hdulist_hold.data = np.mean(data,axis=2)
                    hdulist2.append(hdulist_hold)
                    cnt = 1 

        hdulist2 = fits.HDUList(hdus=hdulist2)
        hdulist2.writeto(scienceimage,output_verify='fix',overwrite=True)

def phase_images(phaseDir,fitsfiles,nimages,phase,doRegistration=False):

    fitsfilename = os.path.join(phaseDir,'phase.fits')

    phase_array = np.linspace(0,1.0,nimages+1)
    phase_counts = np.zeros((nimages,))

    hdulist_hold = []
    cnt = 0

    #fitsfiles = fitsfiles[:2]

    for ii in range(len(fitsfiles)):
        print("%d/%d"%(ii,len(fitsfiles)))
        hdulist = fits.open(fitsfiles[ii])
        header = hdulist[0].header
        data = hdulist[0].data

        if cnt == 0:
            header = hdulist[0].header
            header["EXTEND"] = "T"
            hdulist_hold.append(fits.PrimaryHDU(header=header))
          
            xshape, yshape = hdulist[1].data.shape
            datas = np.zeros([xshape,yshape,nimages])

            if doRegistration:
                reference = hdulist[1].data

        for jj in range(len(hdulist)-1):
            dateobs = Time(hdulist[jj+1].header["DATE"])
            mjd = dateobs.mjd
            mjd_mod = np.mod(mjd, phase)/phase
            idx = np.where((mjd_mod>=phase_array[:-1]) & (mjd_mod<=phase_array[1:]))[0][0] 
            data = hdulist[jj+1].data

            if doRegistration:
                shift, error, diffphase = register_translation(reference, data, upsample_factor=1)
                shifted = image_registration.fft_tools.shiftnd(data, (shift[0], shift[1]))
                datas[:,:,idx] = datas[:,:,idx] + shifted
            else:
                datas[:,:,idx] = datas[:,:,idx] + data
            phase_counts[idx] = phase_counts[idx] + 1

        cnt = cnt + 1

    hdulist = fits.open(fitsfiles[0])
    header = hdulist[0].header
    dateobs = Time(hdulist[1].header["DATE"])
    mjd = dateobs.mjd
    mjds = mjd + phase*(phase_array[:-1] + phase_array[1:])/2.0
    for ii in range(nimages):
        header["DATE"] = Time(mjds[ii],format='mjd').iso 
        data = datas[:,:,ii]/phase_counts[ii]
        data = data + 1000.0
        hdulist_hold.append(fits.ImageHDU(data=data, header=header))
    hdulist2 = fits.HDUList(hdus=hdulist_hold)
    hdulist2.writeto(fitsfilename,output_verify='ignore',overwrite=True)

def makemovie(movieDir,fitsfiles,x=None,y=None):

    cnt = 0
    for ii in range(len(fitsfiles)):
        hdulist = fits.open(fitsfiles[ii])
        for jj in range(len(hdulist)):
            if jj == 0: continue
            header = hdulist[jj].header
            data = hdulist[jj].data

            vmin = np.percentile(data,5)
            vmax = np.percentile(data,95)

            plotName = os.path.join(movieDir,'image_%04d.png'%cnt)
            plt.figure()
            plt.imshow(data,vmin=vmin,vmax=vmax,cmap='gray')
            if not x == None:
                plt.xlim(x)
                plt.ylim(y)
            plt.show()
            plt.savefig(plotName,dpi=200)             
            plt.close()
            cnt = cnt + 1
  
    moviefiles = os.path.join(movieDir,"image_%04d.png")
    filename = os.path.join(movieDir,"movie.mpg")
    ffmpeg_command = 'ffmpeg -an -y -r 20 -i %s -b:v %s %s'%(moviefiles,'5000k',filename)
    os.system(ffmpeg_command)
    filename = os.path.join(movieDir,"movie.gif")
    ffmpeg_command = 'ffmpeg -an -y -r 20 -i %s -b:v %s %s'%(moviefiles,'5000k',filename)
    os.system(ffmpeg_command)

# Parse command line
opts = parse_commandline()
inputDir = opts.inputDir
outputDir = opts.outputDir
defaultsDir = opts.defaultsDir
dataDir = opts.dataDir
xstar = opts.xstar
ystar = opts.ystar

dataDirSplit = list(filter(None,dataDir.split("/")))
calibrationDir = "/"+"/".join(dataDirSplit[:-1])+"/calib"
objectSplit = dataDirSplit[-1].split("_")

star, camsetting, passband = objectSplit[0], int(objectSplit[1]), objectSplit[2] 
observedFile = "%s/observed.dat"%inputDir
lines = [line.rstrip('\n') for line in open(observedFile)]
for ii,line in enumerate(lines):
    lineSplit = list(filter(None,line.split(" ")))
    obj, ra, dec = lineSplit[0], float(lineSplit[1]), float(lineSplit[2])
    if obj == star:
        break
    if ii == len(lines)-1:
        print("%s missing from observed list, please add."%obj)
        exit(0)

if not os.path.isdir(outputDir):
    os.makedirs(outputDir)

if opts.doRegistration:
    fitsfiles = sorted(glob.glob(os.path.join(opts.dataDir,'registration','*.fits')))
else:
    fitsfiles = sorted(glob.glob(os.path.join(opts.dataDir,'registration','*_registered_0*.fits')))
wcsfiles = glob.glob(os.path.join(opts.dataDir,'registration','*wcs*.fits'))
sumfiles = glob.glob(os.path.join(opts.dataDir,'registration','*registered_sum.fits'))

header = fits.getheader(fitsfiles[0],ext=0)
T0 = header['DATE']
fitsfileSplit = fitsfiles[0].split("/")[-1].replace(".fits.fz","").replace(".fits","")

path_out_dir='%s/%s'%(outputDir,fitsfileSplit)
if opts.doOverwrite:
    rm_command = "rm -rf %s"%path_out_dir
    os.system(rm_command)
if not os.path.isdir(path_out_dir):
    os.makedirs(path_out_dir)

if (opts.xstar<0) or (opts.ystar<0):
    if len(wcsfiles)>0:
        wcsfile = wcsfiles[0]
        wcs_header = fits.getheader(wcsfile)
        w = WCS(wcs_header)
        x0,y0 = w.wcs_world2pix(ra,dec,1)
    else:
        print("No WCS solution provided... please use --xstar and --ystar.")
else:
    x0, y0 = opts.xstar, opts.ystar

if opts.doSubtraction:
    refimage = os.path.join(path_out_dir,'ref.fits')
    if passband == "U":
        refband = "u"
    elif passband == "B":
        refband = "g"
    elif passband == "V":
        refband = "r"
    elif passband == "R":
        refband = "i"
    elif passband == "I":
        refband = "z"
    elif passband == "g":
        refband = "g"
    elif passband == "r":
        refband = "r"

    if not os.path.isfile(refimage):
        if opts.subtractionSource == "sdss":
            refgood = ztfsub.surveys.get_sdss(opts,refimage,ra,dec,refband)
        elif opts.subtractionSource == "ps1":
            refgood = ztfsub.surveys.get_ps1(opts,refimage,ra,dec,refband)
        else:
            print("Only PS1 and SDSS supported.")
            exit(0)
    else:
        refgood = True

if opts.doStack:
    stackDir = os.path.join(path_out_dir,'stack')
    if not os.path.isdir(stackDir):
        os.makedirs(stackDir)
    if opts.nimages > 1:
        stack_images(stackDir,fitsfiles,opts.nimages,doRegistration=opts.doRegistration) 
        fitsfiles = sorted(glob.glob(os.path.join(stackDir,'*.fits*')))
    else:
        print("You asked to stack but with --nimages 1... passing.")

if opts.doPhase:
    phaseDir = os.path.join(path_out_dir,'phase')
    if not os.path.isdir(phaseDir):
        os.makedirs(phaseDir)
    phasefile = os.path.join(phaseDir,'phase.fits')
    if not os.path.isfile(phasefile):
        phase_images(phaseDir,fitsfiles,opts.nphase,opts.phase,doRegistration=opts.doRegistration)
    fitsfiles = sorted(glob.glob(phasefile))

if opts.doMakeMovie:
    movieDir = os.path.join(path_out_dir,'movie')
    if not os.path.isdir(movieDir):
        os.makedirs(movieDir)

    makemovie(movieDir,fitsfiles,x=[x0-50,x0+50],y=[y0-50,y0+50])

for ii,fitsfile in enumerate(fitsfiles):
    print(ii,fitsfile)

    fitsfileSplit = fitsfile.split("/")[-1].replace(".fits.fz","").replace(".fits","")

    path_out_dir_tmp='%s/%s'%(path_out_dir,fitsfileSplit)
    if not os.path.isdir(path_out_dir_tmp):
        os.makedirs(path_out_dir_tmp)

    scienceimage = '%s/science.fits'%(path_out_dir_tmp)
    catfile = scienceimage.replace(".fits",".cat")
    backfile = scienceimage.replace(".fits",".background.fits")

    if not os.path.isfile(catfile):

        if opts.doCalibration:
            correct_image(calibrationDir,fitsfile,scienceimage,
                          passband,camsetting,opts.nimages)
        else:
            system_command = "cp %s %s"%(fitsfile,scienceimage)
            os.system(system_command)

        if opts.doSubtraction:

            tmpdir='%s/subtract'%(path_out_dir_tmp)
            if not os.path.isdir(tmpdir):
                os.makedirs(tmpdir)

            hdulist = fits.open(fitsfile)
            hdulistsub = copy.copy(hdulist)
            for kk in range(len(hdulist)):
                if kk == 0:
                    hdu_primary = copy.copy(hdulist[kk])
                    continue
                else:
                    hdu = copy.copy(hdulist[kk])
                    hdu.header = wcs_header

                tmpimage='%s/%04d.fits'%(tmpdir,kk)
                hdulist2 = fits.HDUList(hdus=[hdu_primary,hdu])
                hdulist2.writeto(tmpimage,output_verify='fix',overwrite=True)

                ztfsub.utils.p60sdsssub(opts, tmpimage, refimage, [ra,dec],
                    distortdeg=1, scthresh1=3.0,
                    scthresh2=10.0, tu=60000, iu=60000, ig=2.3, tg=1.0,
                    stamps=None, nsx=4, nsy=4, ko=0, bgo=0, radius=10,
                    tlow=-5000.0, ilow=-5000.0, sthresh=5.0, ng=None, 
                    aperture=10.0,
                   defaultsDir=defaultsDir)

                tmplist = fits.open(tmpimage)
                hdulistsub[kk].data = tmplist[1].data
            filename = scienceimage.replace(".fits",".sub.fits")
            hdulist2.writeto(filename,output_verify='fix',overwrite=True)

        ztfsub.utils.sextractor(scienceimage,defaultsDir,doSubtractBackground=opts.doSubtractBackground,catfile=catfile,backfile=backfile)

        cat = np.loadtxt(catfile)
        if not cat.size: continue

        xs, ys, fluxes, fluxerrs, mags, magerrs, ras, decs, A, B, A_world, B_world, theta, theta_world, fwhms, fwhms_world, extnumber = cat[:,0], cat[:,1], cat[:,2], cat[:,3], cat[:,4], cat[:,5], cat[:,6], cat[:,7], cat[:,8], cat[:,9], cat[:,10], cat[:,11], cat[:,12], cat[:,13], cat[:,14], cat[:,15], cat[:,16]

        hdulist = fits.open(scienceimage)
        if len(hdulist) == 1:
            dateobs = Time(hdulist[0].header["DATE"])
            mjds = dateobs.mjd*np.ones(xs.shape)
        else:
            mjds = np.zeros(xs.shape)
            for jj in range(len(hdulist)-1):
                dateobs = Time(hdulist[jj+1].header["DATE"])
                idx = np.where(extnumber==jj+1)[0]
                mjds[idx] = dateobs.mjd

        cat = np.vstack((cat.T,mjds.T)).T
        np.savetxt(catfile,cat,fmt='%.5f')        

    cat = np.loadtxt(catfile)
    if ii == 0:
        if (opts.xstar_field<0) or (opts.ystar_field<0):
            idx = np.argmin(cat[:,4])
            xfield, yfield = cat[idx,0], cat[idx,1]
        else:
            xfield, yfield = opts.xstar_field, opts.ystar_field

    if opts.doForcedPhotometry:
        forcedfile = scienceimage.replace(".fits",".forced")
        if not os.path.isfile(forcedfile):

            mjd_forced, mag_forced, magerr_forced, flux_forced, fluxerr_forced = ztfsub.utils.forcedphotometry(scienceimage,x=x0,y=y0,fwhm=10.0)
            mjd_forced, mag_forced_field, magerr_forced_field, flux_forced_field, fluxerr_forced_field = ztfsub.utils.forcedphotometry(scienceimage,x=xfield,y=yfield,fwhm=10.0)

            mag = mag_forced - mag_forced_field
            magerr = np.sqrt(magerr_forced**2 + magerr_forced_field**2)
            flux = flux_forced/flux_forced_field
            fluxerr = flux*np.sqrt((fluxerr_forced/flux_forced)**2 + (fluxerr_forced_field/flux_forced_field)**2)

            fid = open(forcedfile,'w')
            for ii in range(len(mjd_forced)):
                fid.write('%.10f %.10f %.10f %.10f %.10f\n'%(mjd_forced[ii],mag[ii],magerr[ii],flux[ii],fluxerr[ii]))
            fid.close()

cnt = 0
for ii,fitsfile in enumerate(fitsfiles):
    print(ii,fitsfile)

    fitsfileSplit = fitsfile.split("/")[-1].replace(".fits.fz","").replace(".fits","")
    path_out_dir_tmp='%s/%s'%(path_out_dir,fitsfileSplit)
    scienceimage = '%s/science.fits'%(path_out_dir_tmp)
    catfile = scienceimage.replace(".fits",".cat")
    forcedfile = scienceimage.replace(".fits",".forced")

    fitsfileBase = "_".join(fitsfileSplit.split("_")[:5])
    cat = np.loadtxt(catfile)
    if not cat.size: continue

    if cnt == 0:
        tbl = ascii.read(catfile,names=['X','Y','flux','fluxerr','mag','magerr','RA','Declination','A','B','A_World','B_World','Theta','Theta_World','FWHM_World','FWHM','EXT','MJD'])
        tbl['FILE_INDEX'] = ii
        tbl['fitsfile'] = fitsfileBase
    else:
        tbltemp = ascii.read(catfile,names=['X','Y','flux','fluxerr','mag','magerr','RA','Declination','A','B','A_World','B_World','Theta','Theta_World','FWHM_World','FWHM','EXT','MJD'])
        tbltemp['FILE_INDEX'] = ii
        tbltemp['fitsfile'] = fitsfileBase
        tbl = vstack([tbl,tbltemp])

    if opts.doForcedPhotometry:
        if cnt == 0:
            tblforced = ascii.read(forcedfile,names=['MJD','mag','magerr','flux','fluxerr'])
        else:
            tbltemp = ascii.read(forcedfile,names=['MJD','mag','magerr','flux','fluxerr']) 
            tblforced = vstack([tblforced,tbltemp])

    cnt = cnt + 1   

catfile = '%s/catfile.dat'%(path_out_dir)
ascii.write(tbl,catfile,overwrite=True)
tbl = ascii.read(catfile,names=['X','Y','flux','fluxerr','mag','magerr','RA','Declination','A','B','A_World','B_World','Theta','Theta_World','FWHM_World','FWHM','EXT','MJD','FILE_INDEX','fitsfile'])

if opts.doForcedPhotometry:
    forcedfile = '%s/forced.dat'%(path_out_dir)
    ascii.write(tblforced,forcedfile,overwrite=True)
    tblforced = ascii.read(forcedfile,names=['MJD','mag','magerr','flux','fluxerr'])

    mjd_forced = tblforced['MJD'].data
    mag_forced, magerr_forced = tblforced['mag'].data, tblforced['magerr'].data
    flux_forced, fluxerr_forced = tblforced['flux'].data, tblforced['fluxerr'].data

lims = 25
idx1s = np.where(np.sqrt((tbl['X']-x0)**2 + (tbl['Y']-y0)**2)<=lims)[0]
idx2s = np.where(np.sqrt((tbl['X']-xfield)**2 + (tbl['Y']-yfield)**2)<=lims)[0]
idx1s = idx1s.astype(int)
idx2s = idx2s.astype(int)

x1, x2 = tbl[idx1s]['X'].data, tbl[idx2s]['X'].data
y1, y2 = tbl[idx1s]['Y'].data, tbl[idx2s]['Y'].data
mjd1, mjd2 = tbl[idx1s]['MJD'].data, tbl[idx2s]['MJD'].data
mag1, mag2 = tbl[idx1s]['mag'].data, tbl[idx2s]['mag'].data
magerr1, magerr2 = tbl[idx1s]['magerr'].data, tbl[idx2s]['magerr'].data
flux1, flux2 = tbl[idx1s]['flux'].data, tbl[idx2s]['flux'].data
fluxerr1, fluxerr2 = tbl[idx1s]['fluxerr'].data, tbl[idx2s]['fluxerr'].data

mjd, mag, magerr, flux, fluxerr = [], [], [], [], [] 
for ii in range(len(mjd1)):
    idx3 = np.where(mjd1[ii] == mjd2)[0] 
    if len(idx3) == 0: continue        
    idx3 = idx3[np.argmax(mag2[idx3])]

    mjd.append(mjd1[ii])
    mag.append(mag1[ii] - mag2[idx3])
    magerr.append(np.sqrt(magerr1[ii]**2 + magerr2[idx3]**2))
    flux.append(flux1[ii]/flux2[idx3])
    fluxerr.append((flux1[ii]/flux2[idx3])*np.sqrt((fluxerr1[ii]/flux1[ii])**2 + (fluxerr2[idx3]/flux2[idx3])**2))

idx = np.argsort(mjd)
mjd, mag, magerr, flux, fluxerr = np.array(mjd), np.array(mag), np.array(magerr), np.array(flux), np.array(fluxerr)
mjd, mag, magerr, flux, fluxerr = mjd[idx], mag[idx], magerr[idx], flux[idx], fluxerr[idx] 

filename = os.path.join(path_out_dir,'phot.dat')
fid = open(filename,'w')
for ii in range(len(mjd)):
    fid.write('%.10f %.10f %.10f %.10f %.10f\n'%(mjd[ii],mag[ii],magerr[ii],flux[ii],fluxerr[ii]))
fid.close()
   
filename = os.path.join(path_out_dir,'star.dat')
fid = open(filename,'w')
for ii in range(len(mjd)):
    fid.write('%.10f %.10f %.10f %.10f %.10f\n'%(mjd1[ii],mag1[ii],magerr1[ii],flux1[ii],fluxerr1[ii]))
fid.close()

if opts.doPlots:
 
    if opts.doForcedPhotometry:
        plotName = os.path.join(path_out_dir,'mag_relative_forced.pdf')
        fig = plt.figure(figsize=(20,8))
        plt.errorbar(mjd_forced-mjd_forced[0],mag_forced,magerr_forced,fmt='ko')
        plt.xlabel('Time from %.5f [days]'%mjd[0])
        plt.ylabel('Magnitude [arb]')
        plt.gca().invert_yaxis()
        plt.tight_layout()
        plt.savefig(plotName)
        plt.close()

        plotName = os.path.join(path_out_dir,'flux_relative_forced.pdf')
        fig = plt.figure(figsize=(20,8))
        plt.errorbar(mjd_forced-mjd_forced[0],flux_forced,fluxerr_forced,fmt='ko')
        plt.xlabel('Time from %.5f [days]'%mjd[0])
        plt.ylabel('Flux')
        plt.tight_layout()
        plt.savefig(plotName)
        plt.close()

    plotName = os.path.join(path_out_dir,'star.pdf')
    fig = plt.figure(figsize=(20,8))
    plt.errorbar(mjd1-mjd1[0],mag1,magerr1,fmt='ko')
    plt.xlabel('Time from %.5f [days]'%mjd1[0])
    plt.ylabel('Magnitude [arb]')
    plt.gca().invert_yaxis()
    plt.tight_layout()
    plt.savefig(plotName)
    plt.close()

    plotName = os.path.join(path_out_dir,'drift.pdf')
    plt.scatter(x1,y1,s=20,c=mag1)
    plt.xlabel('X [pixels]')
    plt.ylabel('Y [pixels]')
    cbar = plt.colorbar()
    cbar.set_label('Magnitude [arb]')
    plt.savefig(plotName)
    plt.close()

    plotName = os.path.join(path_out_dir,'drift_numbers.pdf')
    plt.scatter(x1,y1,s=20,c=np.arange(len(x1)))
    plt.xlabel('X [pixels]')
    plt.ylabel('Y [pixels]')
    plt.xlim([570,630])
    plt.ylim([537,545])
    cbar = plt.colorbar()
    cbar.set_label('Image Number')
    plt.savefig(plotName)
    plt.close()

    plotName = os.path.join(path_out_dir,'star_field.pdf')
    fig = plt.figure(figsize=(20,8))
    plt.errorbar(mjd2-mjd2[0],mag2,magerr2,fmt='ko')
    plt.xlabel('Time from %.5f [days]'%mjd2[0])
    plt.ylabel('Magnitude [arb]')
    plt.gca().invert_yaxis()
    plt.tight_layout()
    plt.savefig(plotName)
    plt.close()

    plotName = os.path.join(path_out_dir,'drift_field.pdf')
    plt.scatter(x2,y2,s=20,c=mag2)
    plt.xlabel('X [pixels]')
    plt.ylabel('Y [pixels]')
    cbar = plt.colorbar()
    cbar.set_label('Magnitude [arb]')
    plt.savefig(plotName)
    plt.close()

    plotName = os.path.join(path_out_dir,'mag_relative.pdf')
    fig = plt.figure(figsize=(20,8))
    plt.errorbar(mjd-mjd[0],mag,magerr,fmt='ko')
    plt.xlabel('Time from %.5f [days]'%mjd[0])
    plt.ylabel('Magnitude [arb]')
    plt.ylim([np.percentile(mag,5)*0.9,np.percentile(mag,95)*1.1])
    plt.gca().invert_yaxis()
    plt.tight_layout()
    plt.savefig(plotName)
    plt.close()

    plotName = os.path.join(path_out_dir,'flux_relative.pdf')
    fig = plt.figure(figsize=(20,8))
    plt.errorbar(mjd-mjd[0],flux,fluxerr,fmt='ko')
    plt.xlabel('Time from %.5f [days]'%mjd[0])
    plt.ylabel('Flux Ratio')
    plt.ylim([np.percentile(flux,5)*0.9,np.percentile(flux,95)*1.1])
    plt.tight_layout()
    plt.savefig(plotName)
    plt.close()

    plotName = os.path.join(path_out_dir,'AoverB.pdf')
    plt.scatter(tbl["X"],tbl["Y"],s=20,c=tbl["A"]/tbl["B"])
    plt.xlabel('X [pixels]')
    plt.ylabel('Y [pixels]')
    cbar = plt.colorbar()
    cbar.set_label('A/B')
    plt.savefig(plotName)
    plt.close()

    plotName = os.path.join(path_out_dir,'fwhm.pdf')
    plt.scatter(tbl["X"],tbl["Y"],s=20,c=tbl["FWHM_World"])
    plt.xlabel('X [pixels]')
    plt.ylabel('Y [pixels]')
    cbar = plt.colorbar()
    cbar.set_label('FWHM')
    plt.savefig(plotName)
    plt.close()


