#!/usr/bin/env

import os, sys, optparse, shutil
import glob
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.patches as patches
from datetime import datetime

import astropy.table
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.coordinates import EarthLocation
from astropy.coordinates import Angle
from astropy.table import Table, vstack
from astropy.time import Time, TimeDelta
from astropy.io import fits
from astropy.io import ascii

from astroplan import Observer
from astroplan import FixedTarget
from astroplan import ObservingBlock
from astroplan.constraints import TimeConstraint
from astroplan.constraints import AtNightConstraint, AirmassConstraint
from astroplan.scheduling import Transitioner
from astroplan.scheduling import SequentialScheduler
from astroplan.scheduling import PriorityScheduler
from astroplan.scheduling import Schedule
from astroplan.plots import plot_schedule_airmass
from astroplan import observability_table

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-f","--outfile",default="/home/kped/Software/Queue/Michael_queue/queue_target.dat")
    parser.add_option("-l","--object_lists",default="/home/kped/KP84/object_lists")

    parser.add_option("-r","--requests",default="/home/kped/Software/Queue/Michael_queue/requests/")
    parser.add_option("-b","--observations",default="/home/kped/Software/Queue/Michael_queue/observations/")
    
    parser.add_option("-o","--outputDir",default="../output_observing")
    parser.add_option("-s","--tstart",default="2019-08-27 03:30")
    parser.add_option("-e","--tend",default="2019-08-27 15:30")

    parser.add_option("-c","--significance_cut",default=0.0,type=float)

    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doTime",  action="store_true", default=False)

    opts, args = parser.parse_args()

    return opts

def convert_to_hex(val, delimiter=':', force_sign=False):
    """
    Converts a numerical value into a hexidecimal string

    Parameters:
    ===========
    - val:           float
                     The decimal number to convert to hex.

    - delimiter:     string
                     The delimiter between hours, minutes, and seconds
                     in the output hex string.

    - force_sign:    boolean
                     Include the sign of the string on the output,
                     even if positive? Usually, you will set this to
                     False for RA values and True for DEC

    Returns:
    ========
    A hexadecimal representation of the input value.
    """
    s = np.sign(val)
    s_factor = 1 if s > 0 else -1
    val = np.abs(val)
    degree = int(val)
    minute = int((val  - degree)*60)
    second = (val - degree - minute/60.0)*3600.
    if degree == 0 and s_factor < 0:
        return '-00{2:s}{0:02d}{2:s}{1:.2f}'.format(minute, second, delimiter)
    elif force_sign or s_factor < 0:
        deg_str = '{:+03d}'.format(degree * s_factor)
    else:
        deg_str = '{:02d}'.format(degree * s_factor)
    return '{0:s}{3:s}{1:02d}{3:s}{2:.2f}'.format(deg_str, minute, second, delimiter)

def load_observations(filename):

    lines = [line.rstrip('\n') for line in open(filename)]
    data = {}
    for line in lines:
        lineSplit = line.split("=")
        data[lineSplit[0]] = lineSplit[1]

    return data

def load_variables(filename):

    names = ["requestID", "programID", "objectID", "ra_hex", "dec_hex", "epoch", "ra_rate", "dec_rate", "mag", "exposure_time", "filter", "mode", "pi", "comment"]
    targets = astropy.io.ascii.read(filename,names=names)
    
    sigs, periods = [], []
    coords, target = [], []
    ras, decs = [], []
    for row in targets:
        comment = row["comment"]
        commentSplit = comment.split("_")
        sig, period = float(commentSplit[0]), float(commentSplit[1])
        sigs.append(sig)
        periods.append(period)
    
        ra_hex, dec_hex = row["ra_hex"], row["dec_hex"]
    
        ra  = Angle(ra_hex, unit=u.hour).deg
        dec = Angle(dec_hex, unit=u.deg).deg
    
        coord = SkyCoord(ra=ra*u.deg, dec=dec*u.deg)
        tar = FixedTarget(coord=coord, name=row["objectID"])
        coords.append(coord)
        target.append(tar)
        ras.append(ra)
        decs.append(dec)
    
    targets["sig"] = sigs
    targets["periods"] = periods
    targets["coords"] = coords
    targets["target"] = target
    targets["ra"] = ras
    targets["dec"] = decs
    targets["programID"] = 1
    
    targets.sort("sig")
    targets.reverse()
    targets = astropy.table.unique(targets, keys=["objectID"])

    return targets

def load_GW(filename):
    lines = [line.rstrip('\n') for line in open(filename)]
    data = eval(lines[0])

    queue_name = data['queue_name']
    observations = data['targets']

    names = ["requestID", "programID", "objectID", "ra_hex", "dec_hex", "epoch", "ra_rate", "dec_rate", "mag", "exposure_time", "filter", "mode", "pi", "comment"]
    targets = []
    for ii, observation in enumerate(observations):

        ra, dec = observation["ra"], observation["dec"]
        ra_hex, dec_hex = convert_to_hex(ra*24/360.0,delimiter=':'), convert_to_hex(dec,delimiter=':')

        filt = observation["filter_id"]
        if filt == 1:
            filt = "FILTER_SLOAN_G"
        elif filt == 2:
            filt = "FILTER_SLOAN_R"
        elif filt == "3":
            filt = "FILTER_JOHNSON_I"

        comment = "10000000000000000000_0"
        targets.append([str(observation['request_id']),
                        observation['program_id'],
                        str(observation['request_id']),
                        ra_hex, dec_hex, 2000, 0, 0,
                        1e5, observation['exposure_time'],
                        filt, 9, observation['program_pi'],
                        comment])

    targets = Table(rows=targets, names=names)

    sigs, periods = [], []
    coords, target = [], []
    ras, decs = [], []
    for row in targets:
        comment = row["comment"]
        commentSplit = comment.split("_")
        sig, period = float(commentSplit[0]), float(commentSplit[1])
        sigs.append(sig)
        periods.append(period)

        ra_hex, dec_hex = row["ra_hex"], row["dec_hex"]

        ra  = Angle(ra_hex, unit=u.hour).deg
        dec = Angle(dec_hex, unit=u.deg).deg

        coord = SkyCoord(ra=ra*u.deg, dec=dec*u.deg)
        tar = FixedTarget(coord=coord, name=row["objectID"])
        coords.append(coord)
        target.append(tar)
        ras.append(ra)
        decs.append(dec)

    targets["sig"] = sigs
    targets["periods"] = periods
    targets["coords"] = coords
    targets["target"] = target
    targets["ra"] = ras
    targets["dec"] = decs
    targets["programID"] = 1

    targets.sort("sig")
    targets.reverse()
    targets = astropy.table.unique(targets, keys=["objectID"])

    return targets

# Parse command line
opts = parse_commandline()
object_lists = opts.object_lists
outfile = opts.outfile

outputDir = opts.outputDir
if not os.path.isdir(outputDir):
    os.makedirs(outputDir)

location = EarthLocation.from_geodetic(-111.5967*u.deg, 31.9583*u.deg,
                                       2096*u.m)
kp = Observer(location=location, name="Kitt Peak",timezone="US/Arizona")

if opts.doTime:
    tstart = Time(opts.tstart)
    tend = Time(opts.tend)
else:
    tstart = Time.now()
    tend = Time.now() + TimeDelta(12*u.hour)

global_constraints = [AirmassConstraint(max = 1.5, boolean_constraint = False),
    AtNightConstraint.twilight_civil()]

targets_all = []
programs = ["variables", "GW"]
for program in programs:
    object_list_dir = os.path.join(object_lists, program)
    filenames = glob.glob(os.path.join(object_list_dir, '*'))
    for filename in filenames:
        if program == "variables":
            targets = load_variables(filename)
        elif program == "GW":
            targets = load_GW(filename)
        else:
            print("How do I load objects from the %s program?")
            exit(0)

        targets_all.append(targets)
targets = vstack(targets_all)

observations = {}
filenames = glob.glob(os.path.join(opts.observations, '*'))
for filename in filenames:
    data = load_observations(filename)
    if data["SUCCESS"] == "1":
        object_id, dateobs = data["OBJECT_ID"], data["DATEOBS"]
        if not object_id in observations:
            observations[object_id] = []
        observations[object_id].append(dateobs)

idx = np.where(targets["sig"] > opts.significance_cut)[0]
targets = targets[idx]

priorities = np.arange(1,len(targets)+1)
blocks = []
read_out = 10.0 * u.s
nexp = 1
for ii, target in enumerate(targets):
    if target["target"] in observations: continue

    bandpass = target["filter"]
    exposure_time = int(target["exposure_time"]) * u.s
    priority = priorities[ii]

    b = ObservingBlock.from_exposures(target["target"],priority,
                                      exposure_time, nexp, read_out,
                                      configuration = {'filter': bandpass})
    blocks.append(b)

# Initialize a transitioner object with the slew rate and/or the
# duration of other transitions (e.g. filter changes)
slew_rate = 2.0*u.deg/u.second
transitioner = Transitioner(slew_rate,
                            {'filter':{'default': 10*u.second}})

# Initialize the sequential scheduler with the constraints and transitioner
prior_scheduler = PriorityScheduler(constraints = global_constraints,
                                    observer = kp,
                                    transitioner = transitioner)
# Initialize a Schedule object, to contain the new schedule
priority_schedule = Schedule(tstart, tend)

# Call the schedule with the observing blocks and schedule to schedule the blocks
prior_scheduler(blocks, priority_schedule)

cnt = 0 

fid = open(outfile,'w')
for schedule in priority_schedule.to_table():
    tar = schedule["target"]
    if tar == "TransitionBlock": continue

    if (not opts.doTime) and (cnt > 0):
        continue

    idx = np.where(targets["objectID"] == tar)[0]
    target = targets[idx]
    filt = schedule["configuration"]["filter"]
    obsstart, obsend = Time(schedule["start time (UTC)"]), Time(schedule["end time (UTC)"])

    expt = int(schedule["duration (minutes)"]*60.0)

    c = SkyCoord(ra=target["ra"][0]*u.degree, dec=target["dec"][0]*u.degree,
                 frame='icrs')
    ra = c.ra.to_string(unit=u.hour, sep=':')
    dec = c.dec.to_string(unit=u.degree, sep=':')

    nt = Time.now()
    gps = nt.gps
    requestID = "%s_%d" % (target["objectID"][0],gps)

    if not opts.doTime:
        print('PROGRAM_PI=%s' % target["pi"][0],file=fid,flush=True)
        print('PROGRAM_ID=%s' % target["programID"][0],file=fid,flush=True)
        print('OBJECT_ID=%s' % target["objectID"][0],file=fid,flush=True)
        print('REQUEST_ID=%s' % requestID,file=fid,flush=True)
        print('COMMENT=%s' % target["comment"][0],file=fid,flush=True)
        print('OBJ_RA=%s' % target["ra_hex"][0],file=fid,flush=True)
        print('OBJ_DEC=%s' % target["dec_hex"][0],file=fid,flush=True)
        print('EQUINOX=%.2f' % target["epoch"][0],file=fid,flush=True)
        print('RA_RATE=%.2f' % target["ra_rate"][0],file=fid,flush=True)
        print('DEC_RATE=%.2f' % target["dec_rate"][0],file=fid,flush=True)
        print('MAGNITUDE=%.2f' % target["mag"][0],file=fid,flush=True)
        print('EXPTIME=%d' % target["exposure_time"][0],file=fid,flush=True)
        print('FILTER=%s' % target["filter"][0],file=fid,flush=True)
        print('CAMERA_MODE=%d' % target["mode"][0],file=fid,flush=True)
    else:
        print('%s,%d,%s,%s,%s,%.1f,%.2f,%.2f,%.2f,%.0f,%s,%d,%s,%s'%(requestID, target["programID"][0], target["objectID"][0], target["ra_hex"][0], target["dec_hex"][0], target["epoch"][0], target["ra_rate"][0], target["dec_rate"][0], target["mag"][0], target["exposure_time"][0], target["filter"][0], target["mode"][0], target["pi"][0], target["comment"][0]),file=fid,flush=True)

    cnt = cnt + 1

fid.close()

if not opts.doTime:
    cp_command = "cp %s %s/%s.dat" % (outfile, opts.requests, requestID)
    os.system(cp_command) 

if opts.doPlots:
    # plot the schedule with the airmass of the targets
    plt.figure(figsize = (28,6))
    plot_schedule_airmass(priority_schedule,show_night=True)
    plt.legend(loc = "upper right")
    #plt.show()
    plt.savefig(os.path.join(outputDir,'scheduler.pdf'))
    plt.close()

