#!/usr/bin/env python
  
import os, sys
import glob
import optparse

import numpy as np
import h5py
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.coordinates import Angle
from penquins import Kowalski

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("--catalogDir", help="catalog directory",default="../catalogs")

    parser.add_option("-r","--ra",default=214.956010,type=float)
    parser.add_option("-d","--declination",default=33.005978,type=float)
    parser.add_option("-a","--radius",default=5.0,type=float)

    parser.add_option("-u","--user")
    parser.add_option("-w","--pwd")

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()
catalogFile = os.path.join(opts.catalogDir, 'CLU.hdf5')

with h5py.File(catalogFile, 'r') as f:
    name = f['name'][:]
    ra, dec = f['ra'][:], f['dec'][:]
    sfr_fuv, mstar = f['sfr_fuv'][:], f['mstar'][:]
    distmpc, magb = f['distmpc'][:], f['magb'][:]
    a, b2a, pa = f['a'][:], f['b2a'][:], f['pa'][:]
    btc = f['btc'][:]

idx = np.where(distmpc >= 0)[0]
ra, dec = ra[idx], dec[idx]
sfr_fuv, mstar = sfr_fuv[idx], mstar[idx]
distmpc, magb = distmpc[idx], magb[idx]
a, b2a, pa = a[idx], b2a[idx], pa[idx]
btc = btc[idx]

idx = np.where(distmpc <= 300)[0]
ra, dec = ra[idx], dec[idx]
sfr_fuv, mstar = sfr_fuv[idx], mstar[idx]
distmpc, magb = distmpc[idx], magb[idx]
a, b2a, pa = a[idx], b2a[idx], pa[idx]
btc = btc[idx]

galaxy_coords = SkyCoord(ra * u.deg, dec * u.deg, distmpc * u.Mpc)

kow = Kowalski(username=opts.user, password=opts.pwd)

coord = SkyCoord(opts.ra * u.deg, opts.declination * u.deg)
sep = coord.separation(galaxy_coords).deg

qu = { "query_type": "cone_search", "object_coordinates": { "radec": "[(%.5f,%.5f)]"%(opts.ra,opts.declination), "cone_search_radius": "%.2f" % opts.radius, "cone_search_unit": "arcsec" }, "catalogs": { "ZTF_alerts": { "filter": "{}", "projection": "{}" } } }
r = kow.query(query=qu)

if not "result_data" in r:
    print("Query failed. returning.")
    exit(0)

key = list(r["result_data"].keys())[0]
data = r["result_data"][key]

for key in data.keys():
    data_tmp = data[key]
    if len(data_tmp) == 0:
        continue
    ztf_name = data_tmp[0]["_id"]
distnr = []
jds = []
for dat in data_tmp:
    jds.append(dat["candidate"]["jd"])
    distnr.append(dat["candidate"]["distnr"])

ztf_name = ztf_name.split("_")[1]
print(ztf_name, np.min(jds), np.min(sep)*3600.0)

