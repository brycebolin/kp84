#!/usr/bin/env python

import os, sys, optparse, shutil, glob, copy, datetime
import numpy as np
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt

from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.table import Table, vstack
from astropy.io import ascii
from astropy.time import Time
from astropy.wcs import WCS

from astroquery.vizier import Vizier

import h5py    
from astropy.io import fits

import ztfsub.utils, ztfsub.surveys
import ztfsub.plotting

from skimage.feature import register_translation
import image_registration

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("--filename",default="/Users/mcoughlin/Code/KP84/observing/1stMar/hz44/throughputTest_U/THROUGHPUT_TEST_U_27.fits")

    parser.add_option("-t","--tmpDir",default="/tmp")
    parser.add_option("-i","--inputDir",default="../input")
    parser.add_option("-o","--outputDir",default="../output/WASP")
    parser.add_option("-d","--defaultsDir",default="../defaults")

    parser.add_option("-x","--xstar",default=-1,type=float)
    parser.add_option("-y","--ystar",default=-1,type=float)

    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doSubtractBackground",  action="store_true", default=False)
    parser.add_option("--doOverwrite",  action="store_true", default=False)
    parser.add_option("--doCalibration",  action="store_true", default=False)
    parser.add_option("--doForcedPhotometry",  action="store_true", default=False)

    opts, args = parser.parse_args()

    return opts

def correct_image(calibrationDir,fitsfile,scienceimage,
                  filt,camsetting,nimages):
    dark = dark_image(calibrationDir,camsetting)

    flatfiles = glob.glob(os.path.join(calibrationDir,'flat_%s.fits'%filt))
    for ii, flatfile in enumerate(flatfiles):
        hdulist = fits.open(flatfile)
        if ii == 0:
            xshape, yshape = hdulist[0].data.shape
            flat = np.empty([xshape,yshape,0])
        for hdu in hdulist: 
            flat = np.append(flat,np.expand_dims(hdu.data,axis=2),axis=2)
    flat = np.median(flat,axis=2)

    IFminusIB = flat - dark
    m = np.mean(IFminusIB)

    hdulist = fits.open(fitsfile,memmap=True)
    for ii in range(len(hdulist)):
        if ii == 0: continue
        hdulist[ii].data = ((hdulist[ii].data - dark)*m)/IFminusIB

    if nimages == 1:
        hdulist2 = hdulist
    else:
        hdulist2 = []
        cnt = 1
        for ii in range(len(hdulist)):
            if ii == 0:
                hdulist2.append(hdulist[ii])
            else:
                if cnt == 1:
                    hdulist_hold = copy.copy(hdulist[ii])
                    xshape, yshape = hdulist_hold.data.shape
                    data = np.empty([xshape,yshape,0])
                data = np.append(data,np.expand_dims(hdulist[ii].data,axis=2),axis=2)
                cnt = cnt + 1            

                if cnt == nimages:
                    hdulist_hold.data = np.mean(data,axis=2)
                    hdulist2.append(hdulist_hold)
                    cnt = 1    

        hdulist2 = fits.HDUList(hdus=hdulist2)

    keywords_to_remove = ["RAD","DECD","TELRA","TELDEC","TELRAD","TELDECD","CRPIX1","CRPIX2","CRVAL1","CRVAL2","CD1_1","CD1_2","CD2_1","CD2_2","CCD_ROT","PIXSCALX","PIXSCALY","CUNIT1","CUNIT2","WCSAXES","WCSNAME","RADESYS","WCSVERS","CTYPE1","CTYPE2","RA","DEC"]
    for ii in range(len(hdulist2)):
        for keyword in keywords_to_remove:
            if keyword in hdulist2[ii].header:
                del hdulist2[ii].header[keyword]

    hdulist2.writeto(scienceimage,output_verify='fix',overwrite=True)

# Parse command line
opts = parse_commandline()
inputDir = opts.inputDir
outputDir = opts.outputDir
defaultsDir = opts.defaultsDir
fitsfile = opts.filename
xstar = opts.xstar
ystar = opts.ystar

fitsfileSplit = list(filter(None,fitsfile.split("/")))[-1].replace(".fits","")
if not os.path.isdir(outputDir):
    os.makedirs(outputDir)

path_out_dir='%s/%s'%(outputDir,fitsfileSplit)
if opts.doOverwrite:
    rm_command = "rm -rf %s"%path_out_dir
    os.system(rm_command)
if not os.path.isdir(path_out_dir):
    os.makedirs(path_out_dir)

x0, y0 = opts.xstar, opts.ystar

scienceimage = '%s/science.fits'%(path_out_dir)
catfile = scienceimage.replace(".fits",".cat")
backfile = scienceimage.replace(".fits",".background.fits")

if not os.path.isfile(catfile):

    if opts.doCalibration:
        correct_image(calibrationDir,fitsfile,scienceimage,
              opts.filter,opts.camsetting,opts.nimages)
    else:
        system_command = "cp %s %s"%(fitsfile,scienceimage)
        os.system(system_command)

    ztfsub.utils.sextractor(scienceimage,defaultsDir,doSubtractBackground=opts.doSubtractBackground,catfile=catfile,backfile=backfile)

    cat = np.loadtxt(catfile)
    if not cat.size:
        print('No sources?!?')
        exit(0)

    xs, ys, fluxes, fluxerrs, mags, magerrs, ras, decs, A, B, A_world, B_world, theta, theta_world, fwhms, fwhms_world, extnumber = cat[:,0], cat[:,1], cat[:,2], cat[:,3], cat[:,4], cat[:,5], cat[:,6], cat[:,7], cat[:,8], cat[:,9], cat[:,10], cat[:,11], cat[:,12], cat[:,13], cat[:,14], cat[:,15], cat[:,16]

    cat = np.loadtxt(catfile)
    if opts.doForcedPhotometry:
        forcedfile = scienceimage.replace(".fits",".forced")
        if not os.path.isfile(forcedfile):

            mjd_forced, mag_forced, magerr_forced, flux_forced, fluxerr_forced = ztfsub.utils.forcedphotometry(scienceimage,x=x0,y=y0,fwhm=10.0)

            fid = open(forcedfile,'w')
            fid.write('%.10f %.10f %.10f %.10f\n'%(mag_forced,magerr_forced,flux_forced,fluxerr_forced))
            fid.close()

